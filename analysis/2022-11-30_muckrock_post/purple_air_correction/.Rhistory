care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68)
library(tidyverse)
library(rio)
library(janitor)
library(plotly)
library(here)
library(lubridate)
library(htmlwidgets)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_a <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_b <- read_csv(here("purple_air_correction", "data", "processed", "care_2", "LUC_CARE 2 B (undefined) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
care_2_both_channels <- rbind(care_2_a, care_2_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
care_2_hourly <-
care_2_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
care_2_daily_comp <-
care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68)
# removes just one day in actuality, 2022-29-05, and the following two days 30/31 for NaN
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
care_2 <-
care_2_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
care_2_corrected <-
care_2 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
care_2_agg <-
care_2_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
care_2_daily_clean <-
care_2_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(care_2_daily_comp, by = "date")
### Plotting for comparison
plot_df <-
care_2_daily_clean %>%
pivot_longer(cols = c("raw", "corrected"))
plot <- ggplot(plot_df, aes(x=date, y=value)) +
geom_line(aes(colour=name))
ggplotly(plot)
saveWidget(ggplotly(plot), file = "correction_care_2.html")
library(tidyverse)
library(rio)
library(janitor)
library(plotly)
library(here)
library(lubridate)
library(htmlwidgets)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_a <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_b <- read_csv(here("purple_air_correction", "data", "processed", "care_2", "LUC_CARE 2 B (undefined) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(lubridate)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_a <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_b <- read_csv(here("purple_air_correction", "data", "processed", "care_2", "LUC_CARE 2 B (undefined) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
care_2_both_channels <- rbind(care_2_a, care_2_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
care_2_hourly <-
care_2_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
care_2_daily_comp <-
care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
care_2 <-
care_2_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
care_2_corrected <-
care_2 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
care_2_agg <-
care_2_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
care_2_daily_clean <-
care_2_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(care_2_daily_comp, by = "date")
### Plotting for comparison
plot_df <-
care_2_daily_clean %>%
pivot_longer(cols = c("raw", "corrected"))
export(plot_df, "care_2_corrected.csv")
library(tidyverse)
library(rio)
library(janitor)
library(plotly)
library(here)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
h_109_a <- read_csv(here("purple_air_correction", "data","processed", "h_109", "H $ 109 (outside) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "h_109_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(lubridate)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
h_109_a <- read_csv(here("purple_air_correction", "data","processed", "h_109", "H $ 109 (outside) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "h_109_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
h_109_b <- read_csv(here("purple_air_correction", "data", "processed", "h_109", "H $ 109 B (undefined) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "h_109_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data", "processed", "h_109", "H $ 109 (outside) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
h_109_both_channels <- rbind(h_109_a, h_109_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
h_109_hourly <-
h_109_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
h_109_daily_comp <-
h_109_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (h_109_a - h_109_b)*2/(h_109_a + h_109_b)) %>%
filter(diff <= 0.68, diff >= -0.68) %>%
select(date)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
h_109 <-
h_109_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
h_109_corrected <-
h_109 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
h_109_agg <-
h_109_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
h_109_daily_clean <-
h_109_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(h_109_daily_comp, by = "date")
### Plotting for comparison
plot_df <-
h_109_daily_clean %>%
pivot_longer(cols = c("raw", "corrected"))
export(plot_df, "h_109_corrected.csv")
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(lubridate)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_a <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_b <- read_csv(here("purple_air_correction", "data", "processed", "care_2", "LUC_CARE 2 B (undefined) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
care_2_both_channels <- rbind(care_2_a, care_2_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
care_2_hourly <-
care_2_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
care_2_daily_comp <-
care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68) %>%
select(date)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
care_2 <-
care_2_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
care_2_corrected <-
care_2 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
care_2_agg <-
care_2_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
care_2_daily_clean <-
care_2_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(care_2_daily_comp, by = "date")
### Plotting for comparison
plot_df <-
care_2_daily_clean %>%
pivot_longer(cols = c("raw", "corrected"))
export(plot_df, "care_2_corrected.csv")
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv"))
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(ggplot2)
library(plotly)
library(lubridate)
library(htmlwidgets)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv"))
care_2_corrected <- read_csv(here("purple_air_correction", "data", "clean", "care_2_corrected.csv"))
purple_air <-
rbind(h_109_corrected, care_2_corrected)
View(purple_air)
msft <- read_csv(here("east_chicago_analysis", "msft_data", "daily_clean.csv")) %>%
filter(msr_device_nbr == "2135") %>%
select(-number_of_readings) %>%
rename(device_id = msr_device_nbr, date_time = date) %>%
mutate(device_id = as.character(device_id))
epa_days <- read_csv(here("east_chicago_analysis", "epa_data", "washington_pm_25.csv")) %>%
select(date_local, arithmetic_mean) %>%
rename(date_time = date_local, pm_25 = arithmetic_mean) %>%
group_by(date_time) %>%
summarize(pm_25 = mean(pm_25))
View(purple_air)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv")) %>%
mutate(device_id = "h_109")
care_2_corrected <- read_csv(here("purple_air_correction", "data", "clean", "care_2_corrected.csv")) %>%
mutate(device_id = "care_2")
View(care_2_corrected)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv")) %>%
mutate(device_id = "h_109") %>%
filter(name = "corrected")
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv")) %>%
mutate(device_id = "h_109") %>%
filter(name == "corrected")
View(h_109_corrected)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv")) %>%
mutate(device_id = "h_109") %>%
filter(name == "corrected") %>%
select(device_id, date, value) %>%
rename(pm_25 = value)
care_2_corrected <- read_csv(here("purple_air_correction", "data", "clean", "care_2_corrected.csv")) %>%
mutate(device_id = "care_2") %>%
filter(name == "corrected") %>%
select(device_id, date, value) %>%
rename(pm_25 = value)
View(care_2_corrected)
purple_air <-
rbind(h_109_corrected, care_2_corrected)
View(purple_air)
View(msft)
msft <- read_csv(here("east_chicago_analysis", "msft_data", "daily_clean.csv")) %>%
filter(msr_device_nbr == "msft_135") %>%
select(-number_of_readings) %>%
rename(device_id = msr_device_nbr, date_time = date) %>%
mutate(device_id = as.character(device_id))
msft <- read_csv(here("east_chicago_analysis", "msft_data", "daily_clean.csv")) %>%
filter(msr_device_nbr == "2135") %>%
select(-number_of_readings) %>%
rename(device_id = msr_device_nbr, date_time = date) %>%
mutate(device_id = as.character(device_id))
View(msft)
epa_days <- read_csv(here("east_chicago_analysis", "epa_data", "washington_pm_25.csv")) %>%
select(date_local, arithmetic_mean) %>%
rename(date_time = date_local, pm_25 = arithmetic_mean) %>%
group_by(date_time) %>%
summarize(pm_25 = mean(pm_25))
pa_and_msft <- rbind(purple_air, msft)
purple_air <-
rbind(h_109_corrected, care_2_corrected)
msft <- read_csv(here("east_chicago_analysis", "msft_data", "daily_clean.csv")) %>%
filter(msr_device_nbr == "2135") %>%
select(-number_of_readings) %>%
rename(device_id = msr_device_nbr, date_time = date) %>%
mutate(device_id = as.character(device_id))
pa_and_msft <- rbind(purple_air, msft)
View(purple_air)
View(msft)
msft <- read_csv(here("east_chicago_analysis", "msft_data", "daily_clean.csv")) %>%
filter(msr_device_nbr == "2135") %>%
select(-number_of_readings) %>%
rename(device_id = msr_device_nbr) %>%
mutate(device_id = as.character(device_id))
View(msft)
pa_and_msft <- rbind(purple_air, msft)
View(pa_and_msft)
ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(data = epa_days, aes(x=date_time, y=pm_25))
ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id))
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id))
ggplotly(plot)
saveWidget(ggplotly(plot), file = "corrected_comparison.html")
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(data = epa_days, aes(x=date_time, y=pm_25))
ggplotly(plot)
View(epa_days)
str(epa_days)
epa_days <- read_csv(here("east_chicago_analysis", "epa_data", "washington_pm_25.csv")) %>%
select(date_local, arithmetic_mean) %>%
rename(date_time = date_local, pm_25 = arithmetic_mean) %>%
group_by(date_time) %>%
summarize(pm_25 = mean(pm_25)) %>%
rename(date = date_time)
pa_and_msft <- rbind(purple_air, msft)
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(data = epa_days, aes(x=date, y=pm_25))
ggplotly(plot)
ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(data = epa_days, aes(x=date, y=pm_25))
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id))
ggplotly(plot)
View(epa_days)
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(epa_days, aes(x=date, y=pm_25))
ggplotly(plot)
plot <- ggplot(pa_and_msft, aes(x=date, y=pm_25)) +
geom_line(aes(colour=device_id)) +
geom_point(data = epa_days, aes(x=date, y=pm_25))
ggplotly(plot)
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(ggplot2)
library(lubridate)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv")) %>%
mutate(device_id = "h_109") %>%
filter(name == "corrected") %>%
select(device_id, date, value) %>%
rename(pm_25 = value)
care_2_corrected <- read_csv(here("purple_air_correction", "data", "clean", "care_2_corrected.csv")) %>%
mutate(device_id = "care_2") %>%
filter(name == "corrected") %>%
select(device_id, date, value) %>%
rename(pm_25 = value)
purple_air <-
rbind(h_109_corrected, care_2_corrected)
View(purple_air)
export(purple_air, "purple_air_sensors_corrected.csv")
