library(tidyverse)
library(rio)
library(janitor)
library(here)
library(ggplot2)
library(plotly)
library(lubridate)
library(htmlwidgets)
h_109_corrected <- read_csv(here("purple_air_correction", "data", "clean", "h_109_corrected.csv"))
care_2_corrected <- read_csv(here("purple_air_correction", "data", "clean", "care_2_corrected.csv"))
View(h_109_corrected)
View(care_2_corrected)
purple_air <-
rbind(h_109_corrected, care_2_corrected)
View(care_2_corrected)
View(h_109_corrected)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_a <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
care_2_b <- read_csv(here("purple_air_correction", "data", "processed", "care_2", "LUC_CARE 2 B (undefined) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "care_2_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data","processed", "care_2", "LUC_CARE 2 (outside) (41.684739 -87.53683) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
care_2_both_channels <- rbind(care_2_a, care_2_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
care_2_hourly <-
care_2_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
care_2_daily_comp <-
care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
care_2 <-
care_2_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
care_2_corrected <-
care_2 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
care_2_agg <-
care_2_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
care_2_daily_clean <-
care_2_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(care_2_daily_comp, by = "date")
View(care_2_daily_clean)
library(tidyverse)
library(rio)
library(janitor)
library(here)
library(lubridate)
# STEP 1: Load data
# Take 2-minute raw readings, and select the columns we need:
# Time stamp
# Channel A: PM2.5_CF1_ug/m3 (higher correction factor)
h_109_a <- read_csv(here("purple_air_correction", "data","processed", "h_109", "H $ 109 (outside) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "h_109_a") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Time stamp
# Channel B: PM2.5_CF1_ug/m3 (higher correction factor)
h_109_b <- read_csv(here("purple_air_correction", "data", "processed", "h_109", "H $ 109 B (undefined) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
mutate(device_id = "h_109_b") %>%
rename(date_time = created_at, pm_25 = "PM2.5_CF1_ug/m3") %>%
mutate(date_time = ymd_hms(date_time)) %>%
select(device_id, date_time, pm_25)
# Humidity
# Comes only in csv of Channel A as single reading for both channels
humidity <- read_csv(here("purple_air_correction", "data", "processed", "h_109", "H $ 109 (outside) (41.696883 -87.532354) Primary Real Time 05_01_2022 10_31_2022.csv")) %>%
rename(date_time = created_at, rh = "Humidity_%") %>%
mutate(date_time = ymd_hms(date_time)) %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(date_hour) %>%
summarize(rh = mean(rh))
# Concatenate the channels together
h_109_both_channels <- rbind(h_109_a, h_109_b)
# STEP 2: Quality control for completeness
# Average readings to one hour average and get rid of readings that 90% completeness criteria  (27 of 30 readings)
h_109_hourly <-
h_109_both_channels %>%
mutate(date_hour = floor_date(date_time, unit = "hour")) %>%
group_by(device_id, date_hour) %>%
summarize(pm_25 = mean(pm_25), readings = n_distinct(date_time)) %>%
filter(readings >= 27) %>%
select(-readings)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
h_109_daily_comp <-
h_109_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (h_109_a - h_109_b)*2/(h_109_a + h_109_b)) %>%
filter(diff <= 0.68, diff >= -0.68) %>%
select(date)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
h_109 <-
h_109_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
h_109_corrected <-
h_109 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
h_109_agg <-
h_109_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
h_109_daily_clean <-
h_109_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(h_109_daily_comp, by = "date")
View(h_109_daily_clean)
View(care_2_daily_clean)
View(care_2_agg)
View(h_109_agg)
# STEP 3: Quality control for consistency
# Average readings to daily and remove days where Channel A and Channel B are more than 68 percent, typical standard deviation 68%
care_2_daily_comp <-
care_2_hourly %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(device_id, date) %>%
summarize(pm_25 = mean(pm_25)) %>%
pivot_wider(names_from = device_id, values_from = "pm_25") %>%
mutate(diff = (care_2_a - care_2_b)*2/(care_2_a + care_2_b)) %>%
filter(diff <= 0.68, diff >= -0.68) %>%
select(date)
# STEP 4: Perform correction and aggregate to daily, combined channel readings
# Join hourly averages with humidity by hour and convert humidity to percent
care_2 <-
care_2_hourly %>%
left_join(humidity, by = "date_hour") %>%
mutate(rh = rh/100)
# Add column for corrected pm
care_2_corrected <-
care_2 %>%
mutate(corrected_pm = 0.524*pm_25-0.0862*rh + 5.75) %>%
select(-rh)
# Combine channels
care_2_agg <-
care_2_corrected %>%
group_by(date_hour) %>%
summarize(raw = mean(pm_25), corrected = mean(corrected_pm))
# Aggregate to daily from hourly and get rid of days that didn't meet consistency criteria
care_2_daily_clean <-
care_2_agg %>%
mutate(date = floor_date(date_hour, unit = "day")) %>%
group_by(date) %>%
summarize(corrected = mean(corrected), raw = mean(raw)) %>%
inner_join(care_2_daily_comp, by = "date")
### Plotting for comparison
plot_df <-
care_2_daily_clean %>%
pivot_longer(cols = c("raw", "corrected"))
export(plot_df, "care_2_corrected.csv")
library(tidyverse)
library(rio)
library(janitor)
library(here)
november <- read_csv("november_daily.csv")
november <- read_csv(here("data", "november_daily.csv"))
november <- read_csv(here("update_historical_data", "november_daily.csv"))
View(november)
may_october <- read_csv(here("update_historical_data", "may_october_daily.csv"))
november <- read_csv(here("update_historical_data", "november_daily.csv"))
may_october <- read_csv(here("update_historical_data", "may-october_daily.csv"))
View(may_october)
november <- read_csv(here("update_historical_data", "november_daily.csv")) %>%
filter(date >= "2022-05-01")
november <- read_csv(here("update_historical_data", "november_daily.csv")) %>%
filter(date_time >= "2022-05-01")
View(november)
november <- read_csv(here("update_historical_data", "november_daily.csv")) %>%
filter(date_time >= "2022-11-01")
november <- read_csv(here("update_historical_data", "november_daily.csv")) %>%
filter(date_time >= "2022-11-01")
may_october <- read_csv(here("update_historical_data", "may-october_daily.csv")) %>%
filter(date_time >= "2022-05-01", date_time < "2022-11-01"))
may_october <- read_csv(here("update_historical_data", "may-october_daily.csv")) %>%
filter(date_time >= "2022-05-01", date_time < "2022-11-01")
may <-
may_october %>%
filter(date_time >= "2022-05-01", date_time < "2022-05-31") %>%
export(may, "05-2022.csv")
may <-
may_october %>%
filter(date_time >= "2022-05-01", date_time < "2022-05-31")
export(may, "05-2022.csv")
june <-
may_october %>%
filter(date_time >= "2022-06-01", date_time < "2022-06-30")
export(june, "06-2022.csv")
july <-
may_october %>%
filter(date_time >= "2022-07-01", date_time < "2022-07-31")
july <-
may_october %>%
filter(date_time >= "2022-07-01", date_time < "2022-07-31")
export(july, "07-2022.csv")
august <-
may_october %>%
filter(date_time >= "2022-08-01", date_time < "2022-08-31")
export(august, "08-2022.csv")
september <-
may_october %>%
filter(date_time >= "2022-09-01", date_time < "2022-09-30")
export(september, "09-2022.csv")
october <-
may_october %>%
filter(date_time >= "2022-10-01", date_time < "2022-10-31")
export(october, "10-2022.csv")
export(november, "11-2022.csv")
